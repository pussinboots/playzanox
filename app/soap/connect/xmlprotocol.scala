// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.zanox.connect
    
/**
usage:
val obj = scalaxb.fromXML[org.zanox.connect.Foo](node)
val document = scalaxb.toXML[org.zanox.connect.Foo](obj, "foo", org.zanox.connect.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(Some("tns") -> "http://auth.zanox.com/2009-04-01/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val ConnectGetSessionFormat: scalaxb.XMLFormat[org.zanox.connect.GetSession] = new DefaultConnectGetSessionFormat {}
  implicit lazy val ConnectGetSessionResponseFormat: scalaxb.XMLFormat[org.zanox.connect.GetSessionResponse] = new DefaultConnectGetSessionResponseFormat {}
  implicit lazy val ConnectSessionTypeFormat: scalaxb.XMLFormat[org.zanox.connect.SessionType] = new DefaultConnectSessionTypeFormat {}
  implicit lazy val ConnectCreateConnectRequestFormat: scalaxb.XMLFormat[org.zanox.connect.CreateConnectRequest] = new DefaultConnectCreateConnectRequestFormat {}
  implicit lazy val ConnectCreateConnectResponseFormat: scalaxb.XMLFormat[org.zanox.connect.CreateConnectResponse] = new DefaultConnectCreateConnectResponseFormat {}
  implicit lazy val ConnectConnectTypeFormat: scalaxb.XMLFormat[org.zanox.connect.ConnectType] = new DefaultConnectConnectTypeFormat {}
  implicit lazy val ConnectGetUiUrlFormat: scalaxb.XMLFormat[org.zanox.connect.GetUiUrl] = new DefaultConnectGetUiUrlFormat {}
  implicit lazy val ConnectGetUiUrlResponseFormat: scalaxb.XMLFormat[org.zanox.connect.GetUiUrlResponse] = new DefaultConnectGetUiUrlResponseFormat {}
  implicit lazy val ConnectSoapExceptionFormat: scalaxb.XMLFormat[org.zanox.connect.SoapException] = new DefaultConnectSoapExceptionFormat {}
  implicit lazy val ConnectCloseSessionFormat: scalaxb.XMLFormat[org.zanox.connect.CloseSession] = new DefaultConnectCloseSessionFormat {}
  implicit lazy val ConnectCloseSessionResponseFormat: scalaxb.XMLFormat[org.zanox.connect.CloseSessionResponse] = new DefaultConnectCloseSessionResponseFormat {}
  implicit lazy val ConnectPromoteSessionRequestFormat: scalaxb.XMLFormat[org.zanox.connect.PromoteSessionRequest] = new DefaultConnectPromoteSessionRequestFormat {}
  implicit lazy val ConnectPromoteSessionResponseFormat: scalaxb.XMLFormat[org.zanox.connect.PromoteSessionResponse] = new DefaultConnectPromoteSessionResponseFormat {}
  implicit lazy val ConnectPromoteTypeEnumFormat: scalaxb.XMLFormat[org.zanox.connect.PromoteTypeEnum] = new DefaultConnectPromoteTypeEnumFormat {}

  trait DefaultConnectGetSessionFormat extends scalaxb.ElemNameParser[org.zanox.connect.GetSession] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.GetSession] =
      phrase((scalaxb.ElemName(None, "authToken")) ~ 
      (scalaxb.ElemName(None, "publicKey")) ~ 
      (scalaxb.ElemName(None, "signature")) ~ 
      (scalaxb.ElemName(None, "nonce")) ~ 
      (scalaxb.ElemName(None, "timestamp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.zanox.connect.GetSession(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.GetSession, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.authToken, None, Some("authToken"), __scope, false),
        scalaxb.toXML[String](__obj.publicKey, None, Some("publicKey"), __scope, false),
        scalaxb.toXML[String](__obj.signature, None, Some("signature"), __scope, false),
        scalaxb.toXML[String](__obj.nonce, None, Some("nonce"), __scope, false),
        scalaxb.toXML[String](__obj.timestamp, None, Some("timestamp"), __scope, false))

  }

  trait DefaultConnectGetSessionResponseFormat extends scalaxb.ElemNameParser[org.zanox.connect.GetSessionResponse] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.GetSessionResponse] =
      phrase(opt(scalaxb.ElemName(None, "session")) ^^
      { case p1 =>
      org.zanox.connect.GetSessionResponse(p1.headOption map { scalaxb.fromXML[org.zanox.connect.SessionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.zanox.connect.GetSessionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.session map { scalaxb.toXML[org.zanox.connect.SessionType](_, None, Some("session"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultConnectSessionTypeFormat extends scalaxb.ElemNameParser[org.zanox.connect.SessionType] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    override def typeName: Option[String] = Some("sessionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.SessionType] =
      phrase((scalaxb.ElemName(None, "connectId")) ~ 
      opt(scalaxb.ElemName(None, "sessionKey")) ~ 
      opt(scalaxb.ElemName(None, "secretKey")) ~ 
      (scalaxb.ElemName(None, "sessionExpires")) ~ 
      (scalaxb.ElemName(None, "permanent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.zanox.connect.SessionType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.SessionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        __obj.sessionKey map { scalaxb.toXML[String](_, None, Some("sessionKey"), __scope, false) } getOrElse {Nil},
        __obj.secretKey map { scalaxb.toXML[String](_, None, Some("secretKey"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.sessionExpires, None, Some("sessionExpires"), __scope, false),
        scalaxb.toXML[Boolean](__obj.permanent, None, Some("permanent"), __scope, false))

  }

  trait DefaultConnectCreateConnectRequestFormat extends scalaxb.ElemNameParser[org.zanox.connect.CreateConnectRequest] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.CreateConnectRequest] =
      phrase((scalaxb.ElemName(None, "applicationId")) ~ 
      (scalaxb.ElemName(None, "connectId")) ~ 
      (scalaxb.ElemName(None, "publicKey")) ~ 
      (scalaxb.ElemName(None, "timestamp")) ~ 
      (scalaxb.ElemName(None, "nonce")) ~ 
      (scalaxb.ElemName(None, "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.zanox.connect.CreateConnectRequest(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.CreateConnectRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.applicationId, None, Some("applicationId"), __scope, false),
        scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        scalaxb.toXML[String](__obj.publicKey, None, Some("publicKey"), __scope, false),
        scalaxb.toXML[String](__obj.timestamp, None, Some("timestamp"), __scope, false),
        scalaxb.toXML[String](__obj.nonce, None, Some("nonce"), __scope, false),
        scalaxb.toXML[String](__obj.signature, None, Some("signature"), __scope, false))

  }

  trait DefaultConnectCreateConnectResponseFormat extends scalaxb.ElemNameParser[org.zanox.connect.CreateConnectResponse] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.CreateConnectResponse] =
      phrase((scalaxb.ElemName(None, "connectId")) ^^
      { case p1 =>
      org.zanox.connect.CreateConnectResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.CreateConnectResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false))

  }

  trait DefaultConnectConnectTypeFormat extends scalaxb.ElemNameParser[org.zanox.connect.ConnectType] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    override def typeName: Option[String] = Some("connectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.ConnectType] =
      phrase((scalaxb.ElemName(None, "connectId")) ~ 
      (scalaxb.ElemName(None, "applicationId")) ~ 
      (scalaxb.ElemName(None, "loginId")) ~ 
      (scalaxb.ElemName(None, "accessTime")) ~ 
      (scalaxb.ElemName(None, "createTime")) ~ 
      (scalaxb.ElemName(None, "status")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.zanox.connect.ConnectType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.ConnectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        scalaxb.toXML[String](__obj.applicationId, None, Some("applicationId"), __scope, false),
        scalaxb.toXML[Int](__obj.loginId, None, Some("loginId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.accessTime, None, Some("accessTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.createTime, None, Some("createTime"), __scope, false),
        scalaxb.toXML[Int](__obj.status, None, Some("status"), __scope, false))

  }

  trait DefaultConnectGetUiUrlFormat extends scalaxb.ElemNameParser[org.zanox.connect.GetUiUrl] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.GetUiUrl] =
      phrase((scalaxb.ElemName(None, "connectId")) ~ 
      (scalaxb.ElemName(None, "sessionKey")) ~ 
      (scalaxb.ElemName(None, "timestamp")) ~ 
      (scalaxb.ElemName(None, "nonce")) ~ 
      (scalaxb.ElemName(None, "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.zanox.connect.GetUiUrl(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.GetUiUrl, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        scalaxb.toXML[String](__obj.sessionKey, None, Some("sessionKey"), __scope, false),
        scalaxb.toXML[String](__obj.timestamp, None, Some("timestamp"), __scope, false),
        scalaxb.toXML[String](__obj.nonce, None, Some("nonce"), __scope, false),
        scalaxb.toXML[String](__obj.signature, None, Some("signature"), __scope, false))

  }

  trait DefaultConnectGetUiUrlResponseFormat extends scalaxb.ElemNameParser[org.zanox.connect.GetUiUrlResponse] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.GetUiUrlResponse] =
      phrase((scalaxb.ElemName(None, "url")) ^^
      { case p1 =>
      org.zanox.connect.GetUiUrlResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.GetUiUrlResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.url, None, Some("url"), __scope, false))

  }

  trait DefaultConnectSoapExceptionFormat extends scalaxb.ElemNameParser[org.zanox.connect.SoapException] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.SoapException] =
      phrase((scalaxb.ElemName(None, "message")) ~ 
      (scalaxb.ElemName(None, "code")) ^^
      { case p1 ~ p2 =>
      org.zanox.connect.SoapException(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.SoapException, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.message, None, Some("message"), __scope, false),
        scalaxb.toXML[Int](__obj.code, None, Some("code"), __scope, false))

  }

  trait DefaultConnectCloseSessionFormat extends scalaxb.ElemNameParser[org.zanox.connect.CloseSession] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.CloseSession] =
      phrase((scalaxb.ElemName(None, "connectId")) ~ 
      (scalaxb.ElemName(None, "publicKey")) ~ 
      (scalaxb.ElemName(None, "timestamp")) ~ 
      (scalaxb.ElemName(None, "nonce")) ~ 
      (scalaxb.ElemName(None, "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.zanox.connect.CloseSession(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.CloseSession, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        scalaxb.toXML[String](__obj.publicKey, None, Some("publicKey"), __scope, false),
        scalaxb.toXML[String](__obj.timestamp, None, Some("timestamp"), __scope, false),
        scalaxb.toXML[String](__obj.nonce, None, Some("nonce"), __scope, false),
        scalaxb.toXML[String](__obj.signature, None, Some("signature"), __scope, false))

  }

  trait DefaultConnectCloseSessionResponseFormat extends scalaxb.XMLFormat[org.zanox.connect.CloseSessionResponse] with scalaxb.CanWriteChildNodes[org.zanox.connect.CloseSessionResponse] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.zanox.connect.CloseSessionResponse] = seq match {
      case node: scala.xml.Node => Right(org.zanox.connect.CloseSessionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: org.zanox.connect.CloseSessionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultConnectPromoteSessionRequestFormat extends scalaxb.ElemNameParser[org.zanox.connect.PromoteSessionRequest] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.PromoteSessionRequest] =
      phrase((scalaxb.ElemName(None, "connectId")) ~ 
      (scalaxb.ElemName(None, "promoteType")) ~ 
      (scalaxb.ElemName(None, "publicKey")) ~ 
      (scalaxb.ElemName(None, "timestamp")) ~ 
      (scalaxb.ElemName(None, "nonce")) ~ 
      (scalaxb.ElemName(None, "signature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.zanox.connect.PromoteSessionRequest(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.zanox.connect.PromoteTypeEnum](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.PromoteSessionRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.connectId, None, Some("connectId"), __scope, false),
        scalaxb.toXML[org.zanox.connect.PromoteTypeEnum](__obj.promoteType, None, Some("promoteType"), __scope, false),
        scalaxb.toXML[String](__obj.publicKey, None, Some("publicKey"), __scope, false),
        scalaxb.toXML[String](__obj.timestamp, None, Some("timestamp"), __scope, false),
        scalaxb.toXML[String](__obj.nonce, None, Some("nonce"), __scope, false),
        scalaxb.toXML[String](__obj.signature, None, Some("signature"), __scope, false))

  }

  trait DefaultConnectPromoteSessionResponseFormat extends scalaxb.ElemNameParser[org.zanox.connect.PromoteSessionResponse] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.zanox.connect.PromoteSessionResponse] =
      phrase((scalaxb.ElemName(None, "wsSessionExpires")) ~ 
      (scalaxb.ElemName(None, "uiSessionExpires")) ^^
      { case p1 ~ p2 =>
      org.zanox.connect.PromoteSessionResponse(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.zanox.connect.PromoteSessionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.wsSessionExpires, None, Some("wsSessionExpires"), __scope, false),
        scalaxb.toXML[Int](__obj.uiSessionExpires, None, Some("uiSessionExpires"), __scope, false))

  }

  def buildConnectPromoteTypeEnumFormat = new DefaultConnectPromoteTypeEnumFormat {}
  trait DefaultConnectPromoteTypeEnumFormat extends scalaxb.XMLFormat[org.zanox.connect.PromoteTypeEnum] {
    val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.zanox.connect.PromoteTypeEnum] =
      Right(org.zanox.connect.PromoteTypeEnum.fromString(seq.text))
    
    def writes(__obj: org.zanox.connect.PromoteTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }


  trait ConnectServiceBindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://auth.zanox.com/2009-04-01/")
    lazy val service: org.zanox.connect.ConnectServicePortType = new ConnectServiceBinding {}
    def baseAddress = new java.net.URI("https://auth.zanox-affiliate.de/soap/2009-04-01")

    trait ConnectServiceBinding extends org.zanox.connect.ConnectServicePortType {
      def getSession(authToken: String, publicKey: String, signature: String, nonce: String, timestamp: String): Either[scalaxb.Soap11Fault[org.zanox.connect.SoapException], org.zanox.connect.GetSessionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.zanox.connect.GetSession(authToken, publicKey, signature, nonce, timestamp), Some("http://auth.zanox.com/2009-04-01/"), "getSession", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://auth.zanox.com/2009-04-01/getSession"))) match {
          case Left(x)  => Left(x.asFault[org.zanox.connect.SoapException])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.zanox.connect.GetSessionResponse](body.headOption getOrElse {body}))
        }
      def createConnect(applicationId: String, connectId: String, publicKey: String, timestamp: String, nonce: String, signature: String): Either[scalaxb.Soap11Fault[org.zanox.connect.SoapException], String] = 
        soapClient.requestResponse(scalaxb.toXML(org.zanox.connect.CreateConnectRequest(applicationId, connectId, publicKey, timestamp, nonce, signature), Some("http://auth.zanox.com/2009-04-01/"), "createConnectRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://auth.zanox.com/2009-04-01/createConnect"))) match {
          case Left(x)  => Left(x.asFault[org.zanox.connect.SoapException])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.zanox.connect.CreateConnectResponse](body.headOption getOrElse {body}).connectId)
        }
      def getUiUrl(connectId: String, sessionKey: String, timestamp: String, nonce: String, signature: String): Either[scalaxb.Soap11Fault[org.zanox.connect.SoapException], String] = 
        soapClient.requestResponse(scalaxb.toXML(org.zanox.connect.GetUiUrl(connectId, sessionKey, timestamp, nonce, signature), Some("http://auth.zanox.com/2009-04-01/"), "getUiUrl", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://auth.zanox.com/2009-04-01/getUiUrl"))) match {
          case Left(x)  => Left(x.asFault[org.zanox.connect.SoapException])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.zanox.connect.GetUiUrlResponse](body.headOption getOrElse {body}).url)
        }
      def closeSession(connectId: String, publicKey: String, timestamp: String, nonce: String, signature: String): Either[scalaxb.Soap11Fault[org.zanox.connect.SoapException], org.zanox.connect.CloseSessionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.zanox.connect.CloseSession(connectId, publicKey, timestamp, nonce, signature), Some("http://auth.zanox.com/2009-04-01/"), "closeSession", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://auth.zanox.com/2009-04-01/closeSession"))) match {
          case Left(x)  => Left(x.asFault[org.zanox.connect.SoapException])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.zanox.connect.CloseSessionResponse](body.headOption getOrElse {body}))
        }
      def promoteSession(connectId: String, promoteType: org.zanox.connect.PromoteTypeEnum, publicKey: String, timestamp: String, nonce: String, signature: String): Either[scalaxb.Soap11Fault[org.zanox.connect.SoapException], org.zanox.connect.PromoteSessionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.zanox.connect.PromoteSessionRequest(connectId, promoteType, publicKey, timestamp, nonce, signature), Some("http://auth.zanox.com/2009-04-01/"), "promoteSessionRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://auth.zanox.com/2009-04-01/promoteSession"))) match {
          case Left(x)  => Left(x.asFault[org.zanox.connect.SoapException])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.zanox.connect.PromoteSessionResponse](body.headOption getOrElse {body}))
        }
    }
  }



}

